# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [
    worker.LocalWorker('example-worker'),
    # worker.DockerLatentWorker('example-worker', None,
    #                           docker_host='tcp://192.168.178.43:2375',
    #                           image='buildbot/buildbot-worker:master',
    #                           masterFQDN="192.168.178.43")
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes import github

c['change_source'] = [
    changes.GitPoller(
        'git://github.com/nicolai86/buildbot-docker-example-config.git',
        workdir='gitpoller-workdir',
        branch='master',
        pollinterval=300),
    github.GitHubPullrequestPoller(
        owner='nicolai86',
        repo='buildbot-docker-example-config',
        pollAtLaunch=True,
        category="pullrequest"
    )
]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = [
    schedulers.AnyBranchScheduler(
        name="pr-periodic",
        builderNames=["runtests"],
        change_filter=util.ChangeFilter(category='pullrequest')),
    schedulers.AnyBranchScheduler(
        name="pr-webhook",
        builderNames=["runtests"],
        change_filter=util.ChangeFilter(project='nicolai86/buildbot-docker-example-config')),
    schedulers.SingleBranchScheduler(
        name="all",
        change_filter=util.ChangeFilter(branch='master'),
        treeStableTimer=None,
        builderNames=["runtests"]),
    schedulers.ForceScheduler(
        name="force",
        builderNames=["runtests"]),
    # schedulers.Triggerable(name="graphql", builderNames=["graphql"]),
    # schedulers.Triggerable(name="app-unit", builderNames=["app-unit"])
]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
# check out the source
factory.addStep(
    steps.GitHub(
        repourl='https://github.com/nicolai86/buildbot-docker-example-config.git',
        mode='incremental')
)
# run the tests (note that this will require that 'trial' is installed)
# factory.addStep(steps.ShellCommand(command=["npm", "install"], workdir="build/graphql"))
# factory.addStep(steps.ShellCommand(command=["npm", "test"], workdir="build/graphql"))
# factory.addStep(steps.Trigger(schedulerNames=['graphql', 'app-unit'],
#                         waitForFinish=True,
#                         updateSourceStamp=True,
#                         set_properties={ 'quick' : False }))
# factory.addStep(steps.Trigger(schedulerNames=['graphql'],
#                         waitForFinish=True,
#                         updateSourceStamp=True,
#                         set_properties={ 'quick' : False }))

runtests = util.BuildFactory()
runtests.addStep(steps.ShellCommand(command=["sleep", "5"]))
runtests.addStep(steps.ShellCommand(command=["echo", "Hello, World"]))

# appUnit = util.BuildFactory()
# appUnit.addStep(steps.ShellCommand(command=["sleep", "10"]))
# appUnit.addStep(steps.ShellCommand(command=["echo", "Hello, App"]))

c['builders'] = [
    util.BuilderConfig(name="runtests",
        workernames=["example-worker"],
        factory=runtests),
]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

from buildbot.plugins import steps, util
from buildbot.plugins import reporters

context = util.Interpolate("buildbot/%(prop:buildername)s")
gs = reporters.GitHubStatusPush(
    context=context,
    startDescription='Build started.',
    builders=["runtests"],
    endDescription='Build done.')
c['services']=[gs]


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Pyflakes"
c['titleURL'] = "https://launchpad.net/pyflakes"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
# http://localhost:8080/change_hook/github
c['www'] = dict(
    port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
    plugins=dict(waterfall_view={}, console_view={}),
    change_hook_dialects={'github': {'secret': 'moepmoep'}}
    )

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}

